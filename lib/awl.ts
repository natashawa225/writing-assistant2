// Academic Word List (AWL) detection utilities
// Based on Coxhead's Academic Word List organized by sublists

// Sample AWL words by sublist (in a real implementation, this would be a comprehensive list)
const AWL_WORDS: { [key: number]: string[] } = {
  1: [
    "analysis",
    "approach",
    "area",
    "assessment",
    "assume",
    "authority",
    "available",
    "benefit",
    "concept",
    "consistent",
    "constitutional",
    "context",
    "contract",
    "create",
    "data",
    "definition",
    "derived",
    "distribution",
    "economic",
    "environment",
    "established",
    "estimate",
    "evidence",
    "export",
    "factors",
    "financial",
    "formula",
    "function",
    "identified",
    "income",
    "indicate",
    "individual",
    "interpretation",
    "involved",
    "issues",
    "labour",
    "legal",
    "legislation",
    "major",
    "method",
    "occur",
    "percent",
    "period",
    "policy",
    "principle",
    "procedure",
    "process",
    "required",
    "research",
    "response",
    "role",
    "section",
    "sector",
    "significant",
    "similar",
    "source",
    "specific",
    "structure",
    "theory",
    "variables",
  ],
  2: [
    "achieve",
    "acquisition",
    "administration",
    "affect",
    "appropriate",
    "aspects",
    "assistance",
    "categories",
    "chapter",
    "commission",
    "community",
    "complex",
    "computer",
    "conclusion",
    "conduct",
    "consequences",
    "construction",
    "consumer",
    "credit",
    "cultural",
    "design",
    "distinction",
    "elements",
    "equation",
    "evaluation",
    "features",
    "final",
    "focus",
    "impact",
    "injury",
    "institute",
    "investment",
    "items",
    "journal",
    "maintenance",
    "normal",
    "obtained",
    "participation",
    "perceived",
    "positive",
    "potential",
    "previous",
    "primary",
    "purchase",
    "range",
    "region",
    "regulations",
    "relevant",
    "resident",
    "resources",
    "restricted",
    "security",
    "sought",
    "select",
    "site",
    "strategies",
    "survey",
    "text",
    "traditional",
    "transfer",
  ],
  3: [
    "alternative",
    "circumstances",
    "comments",
    "compensation",
    "components",
    "consent",
    "considerable",
    "constant",
    "constraints",
    "contribution",
    "convention",
    "coordination",
    "core",
    "corporate",
    "corresponding",
    "criteria",
    "deduction",
    "demonstrate",
    "document",
    "dominant",
    "emphasis",
    "ensure",
    "excluded",
    "framework",
    "funds",
    "illustrated",
    "immigration",
    "implies",
    "initial",
    "instance",
    "interaction",
    "justification",
    "layer",
    "link",
    "location",
    "maximum",
    "minorities",
    "negative",
    "outcomes",
    "partnership",
    "philosophy",
    "physical",
    "proportion",
    "published",
    "reaction",
    "registered",
    "reliance",
    "removed",
    "scheme",
    "sequence",
    "sex",
    "shift",
    "specified",
    "sufficient",
    "task",
    "technical",
    "techniques",
    "technology",
    "validity",
    "volume",
  ],
}

export function detectAWLWordsBySublist(text: string): Array<{ word: string; sublist: number }> {
  const words = text.toLowerCase().match(/\b\w+\b/g) || []
  const detectedWords: Array<{ word: string; sublist: number }> = []

  // Check each word against AWL sublists
  words.forEach((word) => {
    for (const [sublist, awlWords] of Object.entries(AWL_WORDS)) {
      if (awlWords.includes(word)) {
        // Avoid duplicates
        if (!detectedWords.some((item) => item.word === word)) {
          detectedWords.push({
            word,
            sublist: Number.parseInt(sublist),
          })
        }
      }
    }
  })

  return detectedWords.sort((a, b) => a.sublist - b.sublist)
}

export function getAWLSublistWords(sublist: number): string[] {
  return AWL_WORDS[sublist] || []
}

export function isAWLWord(word: string): boolean {
  const lowerWord = word.toLowerCase()
  return Object.values(AWL_WORDS).some((wordList) => wordList.includes(lowerWord))
}
